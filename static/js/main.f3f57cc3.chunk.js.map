{"version":3,"sources":["pages/Login.js","actions/index.js","components/Header.jsx","services/fetchCurrencies.js","components/ExpensesForm.jsx","components/ExpensesTable.jsx","pages/Wallet.js","App.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["Login","state","emailInputText","password","handleChange","bind","validateEmail","target","name","value","this","setState","email","test","dispatchUserEmail","props","className","htmlFor","type","placeholder","data-testid","required","onChange","minLength","to","disabled","length","onClick","React","Component","connect","dispatch","loginEmail","Header","totalSum","expenses","wallet","total","forEach","expense","Number","exchangeRates","currency","ask","toFixed","user","fetchCurrencies","a","fetch","response","json","jsonResponse","ExpensesForm","id","description","method","tag","addExpense","getCurrencies","saveCurrencies","currencies","Object","keys","event","preventDefault","newExpense","dispatchExpense","filter","map","index","key","onSubmit","renderCurrenciesOptions","tagSelectorInputs","methodSelectorInput","items","payload","ExpensesTable","renderColumns","changeUSDandEUR","renderRows","deleteExpenseFunc","current","remove","deleteExpenseDispatch","parseFloat","item","border","Wallet","App","exact","path","component","INITIAL_STATE","userReducer","action","walletReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f3f57cc3.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport loginEmail from '../actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      emailInputText: '',\n      password: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.validateEmail = this.validateEmail.bind(this);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  validateEmail(email) {\n    const regex = /\\S+@\\S+\\.\\S+/;\n    return regex.test(email);\n  }\n\n  render() {\n    const { password, emailInputText } = this.state;\n    const { dispatchUserEmail } = this.props;\n    const minPasswordLength = 6;\n    return (\n      <div>\n        <form className=\"form__group field\">\n          <label\n            htmlFor=\"email-input\"\n            className=\"form__label\"\n          >\n            <input\n              type=\"email\"\n              name=\"emailInputText\"\n              placeholder=\"Email\"\n              data-testid=\"email-input\"\n              required\n              className=\"form__field\"\n              onChange={ this.handleChange }\n            />\n          </label>\n\n          <label\n            htmlFor=\"password-input\"\n            className=\"form__label\"\n          >\n            <input\n              type=\"password\"\n              name=\"password\"\n              minLength=\"6\"\n              placeholder=\"Senha\"\n              data-testid=\"password-input\"\n              required\n              className=\"form__field\"\n              onChange={ this.handleChange }\n            />\n          </label>\n          <Link to=\"/carteira\">\n            <button\n              type=\"submit\"\n              disabled={ !(this.validateEmail(emailInputText)\n              && password.length >= minPasswordLength) }\n              onClick={ () => dispatchUserEmail(emailInputText) }\n            >\n              Entrar\n            </button>\n          </Link>\n        </form>\n      </div>);\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchUserEmail: (email) => dispatch(loginEmail(email)),\n});\n\nLogin.propTypes = {\n  dispatchUserEmail: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","export const LOGIN_EMAIL = 'LOGIN_EMAIL';\nexport const SAVE_EXPENSE = 'SAVE_EXPENSE';\nexport const ADD_CURRENCIES = 'ADD_CURRENCIES';\nexport const REMOVE_EXPENSE = 'REMOVE_EXPENSE';\n\nexport default function loginEmail(email) {\n  return {\n    type: LOGIN_EMAIL,\n    email,\n  };\n}\n\nexport function saveExpense(payload) {\n  return {\n    type: SAVE_EXPENSE,\n    payload,\n  };\n}\n\nexport const addCurrencies = (payload) => ({\n  type: ADD_CURRENCIES,\n  payload,\n});\n\nexport function removeExpense(payload) {\n  return {\n    type: REMOVE_EXPENSE,\n    payload,\n  };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  constructor() {\n    super();\n    this.totalSum = this.totalSum.bind(this);\n  }\n\n  totalSum() {\n    const { wallet: { expenses } } = this.props;\n    let total = 0;\n    expenses.forEach((expense) => {\n      total += Number(expense.value * (expense.exchangeRates[expense.currency].ask));\n    });\n    return total.toFixed(2);\n  }\n\n  render() {\n    const { email } = this.props;\n    return (\n      <header>\n        <h2>TrybeWallet</h2>\n        <h3 data-testid=\"total-field\">\n          Despesa total: R$\n          {this.totalSum()}\n        </h3>\n        <p data-testid=\"email-field\">{ email }</p>\n      </header>);\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  wallet: state.wallet,\n});\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  wallet: PropTypes.shape({\n    currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n    expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  }).isRequired,\n};\nexport default connect(mapStateToProps)(Header);\n","const API_URL = 'https://economia.awesomeapi.com.br/json/all';\n\nconst fetchCurrencies = async () => {\n  const response = await fetch(API_URL);\n  const jsonResponse = await response.json();\n  // delete jsonResponse.USDT; // DELETA usdt que pede no req 5 ref.: https://stackoverflow.com/questions/3455405/how-do-i-remove-a-key-from-a-javascript-object\n  return jsonResponse;\n};\n\nexport default fetchCurrencies;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { saveExpense, addCurrencies } from '../actions/index';\nimport fetchCurrencies from '../services/fetchCurrencies';\n\nclass ExpensesForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    // this.getCurrencies = this.getCurrencies.bind(this);\n    this.addExpense = this.addExpense.bind(this);\n  }\n\n  componentDidMount() {\n    this.getCurrencies(); // toda vez que entra na pag faz essa chamada à função que retorna a resposta do fetch da api de currencies\n  }\n\n  async getCurrencies() {\n    const { saveCurrencies } = this.props;\n    const response = await fetchCurrencies();\n    const currencies = Object.keys(response);\n    // console.log(currencies);\n    // this.setState({\n    //   currencies,\n    // });\n    saveCurrencies(currencies);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  async addExpense(event) {\n    event.preventDefault();\n    const { id, value, currency, description, method, tag } = this.state;\n    const exchangeRates = await fetchCurrencies(); // returna a chamada da api no momento para salval o vlaor do câmbio na hora que adiciona\n    const newExpense = {\n      id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates,\n    };\n    const { dispatchExpense } = this.props;\n    dispatchExpense(newExpense);\n    this.setState({\n      id: newExpense.id + 1,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    });\n  }\n\n  methodSelectorInput() {\n    return (\n      <label htmlFor=\"method-input\">\n        Forma de pagamento:\n        <select\n          name=\"method\"\n          data-testid=\"method-input\"\n          id=\"method-input\"\n          onChange={ this.handleChange }\n        >\n          <option value=\"Dinheiro\">Dinheiro</option>\n          <option value=\"Cartão de crédito\">Cartão de crédito</option>\n          <option value=\"Cartão de débito\">Cartão de débito</option>\n        </select>\n      </label>\n    );\n  }\n\n  tagSelectorInputs() {\n    return (\n      <label htmlFor=\"tag-input\">\n        Categoria:\n        <select\n          name=\"tag\"\n          data-testid=\"tag-input\"\n          id=\"tag-input\"\n          onChange={ this.handleChange }\n        >\n          <option value=\"Alimentação\">Alimentação</option>\n          <option value=\"Lazer\">Lazer</option>\n          <option value=\"Trabalho\">Trabalho</option>\n          <option value=\"Transporte\">Transporte</option>\n          <option value=\"Saúde\">Saúde</option>\n        </select>\n      </label>\n    );\n  }\n\n  renderCurrenciesOptions() { // Pega as moedas da API salvos no estado do Redux\n    const { currencies } = this.props;\n    return currencies.filter((currency) => currency !== 'USDT').map((currency, index) => (\n      <option key={ index } value={ currency } data-testid={ currency }>\n        {currency}\n      </option>));\n  }\n\n  render() {\n    const { currency } = this.state;\n    return (\n      <form onSubmit={ (event) => this.addExpense(event) }>\n        <label htmlFor=\"description-input\">\n          Descrição:\n          <input\n            type=\"textarea\"\n            name=\"description\"\n            onChange={ this.handleChange }\n            data-testid=\"description-input\"\n            id=\"description-input\"\n          />\n        </label>\n        <label htmlFor=\"value-input\">\n          Valor da Despesa:\n          <input\n            type=\"text\"\n            name=\"value\"\n            onChange={ this.handleChange }\n            data-testid=\"value-input\"\n            id=\"value-input\"\n          />\n        </label>\n        <label htmlFor=\"moeda\">\n          Moeda\n          <select\n            id=\"moeda\"\n            type=\"select\"\n            name=\"currency\"\n            onChange={ this.handleChange }\n            value={ currency }\n            data-testid=\"currency-input\"\n          >\n            { this.renderCurrenciesOptions() }\n          </select>\n        </label>\n        {this.tagSelectorInputs()}\n        {this.methodSelectorInput()}\n        <button\n          type=\"submit\"\n        >\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveCurrencies: (items) => dispatch(addCurrencies(items)),\n  dispatchExpense: (newExpense) => dispatch(saveExpense(newExpense)),\n});\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nExpensesForm.propTypes = {\n  dispatchExpense: PropTypes.func.isRequired,\n  saveCurrencies: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpensesForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { removeExpense } from '../actions';\n\nclass ExpensesTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderColumns = this.renderColumns.bind(this);\n    this.changeUSDandEUR = this.changeUSDandEUR.bind(this);\n    this.renderRows = this.renderRows.bind(this);\n    this.deleteExpenseFunc = this.deleteExpenseFunc.bind(this);\n  }\n\n  deleteExpenseFunc({ current, remove }) {\n    const { deleteExpenseDispatch } = this.props;\n    const expenses = current.filter((expense) => expense.id !== remove.id);\n    deleteExpenseDispatch(expenses);\n  }\n\n  changeUSDandEUR(currency) {\n    if (currency === 'USD') {\n      return 'Dólar Comercial';\n    } if (currency === 'EUR') {\n      return 'Euro';\n    }\n    return currency;\n  }\n\n  renderRows() {\n    const { expenses } = this.props;\n    return (\n      expenses.map((expense) => (\n        <tr\n          key={ expense.id }\n        >\n          <td>\n            { expense.description }\n          </td>\n          <td>\n            { expense.tag }\n          </td>\n          <td>\n            { expense.method }\n          </td>\n          <td>\n            { expense.value }\n          </td>\n          <td>\n            { this.changeUSDandEUR(expense.currency) }\n          </td>\n          <td>\n            { parseFloat(expense.exchangeRates[expense.currency].ask).toFixed(2) }\n          </td>\n          <td>\n            { parseFloat(expense.value * expense.exchangeRates[expense.currency].ask)\n              .toFixed(2) }\n          </td>\n          <td>\n            Real\n          </td>\n\n          <td>\n            <button\n              type=\"button\"\n              data-testid=\"delete-btn\"\n              onClick={\n                () => this.deleteExpenseFunc({ remove: expense, current: expenses })\n              }\n            >\n              Deletar despesa\n            </button>\n          </td>\n        </tr>\n      ))\n    );\n  }\n\n  renderColumns() {\n    const columns = ['Descrição', 'Tag', 'Método de pagamento', 'Valor', 'Moeda',\n      'Câmbio utilizado', 'Valor convertido', 'Moeda de conversão', 'Editar/Excluir'];\n\n    return columns.map((item) => (\n      <th\n        key={ item }\n      >\n        { item }\n      </th>\n    ));\n  }\n\n  render() {\n    return (\n      <div className=\"table-wrapper\">\n        <table\n          border=\"1\"\n          className=\"fl-table\"\n        >\n          <thead>\n            <tr>\n              { this.renderColumns() }\n            </tr>\n          </thead>\n          <tbody>\n            { this.renderRows() }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpenseDispatch: (expense) => dispatch(removeExpense(expense)),\n});\n\nExpensesTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteExpenseDispatch: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpensesTable);\n\n// ref.: https://github.com/tryber/sd-015-b-project-trybewallet/pull/111/commits/b9928dcd66de5f5858f84a647cc9f8b7b4b72863 para fazer a tabela\n// Logica de remover despesa ref.: https://github.com/tryber/sd-015-b-project-trybewallet/pull/114/commits/cf4414032348ef3df1b81244c298392cffe86794\n","import React from 'react';\nimport Header from '../components/Header';\nimport ExpensesForm from '../components/ExpensesForm';\nimport ExpensesTable from '../components/ExpensesTable';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <ExpensesForm />\n        <ExpensesTable />\n      </div>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { LOGIN_EMAIL } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case LOGIN_EMAIL:\n    return {\n      ...state,\n      email: action.email,\n    };\n  default: return state;\n  }\n};\n\nexport default userReducer;\n","// // Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport { SAVE_EXPENSE, REMOVE_EXPENSE, ADD_CURRENCIES } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SAVE_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.payload],\n    };\n  case ADD_CURRENCIES:\n    return {\n      ...state,\n      currencies: action.payload,\n    };\n  case REMOVE_EXPENSE:\n    return {\n      ...state,\n      expenses: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport userReducer from './user';\nimport walletReducer from './wallet';\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  wallet: walletReducer,\n});\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// o provider é o meio pelo qual disponibilizamos o store\n// com os estados de toda a aplicação para todos os demais componentes\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}